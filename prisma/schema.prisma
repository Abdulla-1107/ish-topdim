generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  fullName  String
  phone     String   @unique
  password  String?
  image     String?
  role      String
  createdAt DateTime @default(now())

  announcements Announcement[] // yaratgan eâ€™lonlari
  logs          Log[]
  resumes       Resume[]
  ChatLog       ChatLog[]
  AIContext     AIContext?
}

model Resume {
  id     String @id @default(uuid())
  userId String
  user   User   @relation(fields: [userId], references: [id])

  name      String
  age       Int?
  location  String // manzil (shahar yoki tuman)
  skills    String // texnologiyalar yoki koâ€˜nikmalar
  field     String // kasb: santexnik, haydovchi va h.k.
  phone     String
  createdAt DateTime @default(now())
}

model Announcement {
  id     String @id @default(uuid())
  userId String
  user   User   @relation(fields: [userId], references: [id])

  type        AnnouncementType // 'job' yoki 'service'
  title       String // masalan: "Santexnik kerak"
  description String
  price       Int?
  cityId      String?
  City        City?            @relation(fields: [cityId], references: [id])
  district    String?
  createdAt   DateTime         @default(now())
}

// ai_context schema (Prisma uchun)
model AIContext {
  userId      String   @id
  title       String?
  description String?
  location    String?
  district    String?
  price       Int?
  type        String?

  // ðŸ”½ Qoâ€˜shimcha maydonlar
  action      String?
  field       String[]
  experience  String?
  other       String?

  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id])
}


model City {
  id            String         @id @default(uuid())
  name          String         @unique
  announcements Announcement[]
}

model ChatLog {
  id         String   @id @default(uuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  userText   String
  aiResponse String
  createdAt  DateTime @default(now())
}

model Log {
  id        String    @id @default(uuid())
  userId    String?
  user      User?     @relation(fields: [userId], references: [id])
  action    LogAction
  createdAt DateTime  @default(now())
}

enum AnnouncementType {
  service
  job
}

enum LogAction {
  create_announcement
  delete_announcement
  login_user
  login_admin
}
